// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: fake_recipe.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const fakeListTrendRecipe = `-- name: FakeListTrendRecipe :many
WITH
RECURSIVE generate_index (ii) AS (
    SELECT 0
    UNION ALL
    SELECT ii + 1
    FROM generate_index
)
SELECT
    GEN_RANDOM_UUID() AS recipe_id,
    '' AS name,
    '' AS introduction,
    'https://source.unsplash.com/random/300x300?v=1' AS image_url,
    0 AS num_fav,
    0 AS score
FROM
    generate_index
LIMIT $1
`

type FakeListTrendRecipeRow struct {
	RecipeID     pgtype.UUID `json:"recipeId"`
	Name         string      `json:"name"`
	Introduction string      `json:"introduction"`
	ImageUrl     string      `json:"imageUrl"`
	NumFav       int32       `json:"numFav"`
	Score        int32       `json:"score"`
}

func (q *Queries) FakeListTrendRecipe(ctx context.Context, lim int32) ([]FakeListTrendRecipeRow, error) {
	rows, err := q.db.Query(ctx, fakeListTrendRecipe, lim)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FakeListTrendRecipeRow
	for rows.Next() {
		var i FakeListTrendRecipeRow
		if err := rows.Scan(
			&i.RecipeID,
			&i.Name,
			&i.Introduction,
			&i.ImageUrl,
			&i.NumFav,
			&i.Score,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
