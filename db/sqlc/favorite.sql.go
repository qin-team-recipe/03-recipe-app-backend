// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: favorite.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createFavoriteRecipe = `-- name: CreateFavoriteRecipe :one
INSERT INTO favoring 
(
    recipe_id,
    usr_id
)
VALUES
(
    $1,
    $2
)
RETURNING 
    id, recipe_id, usr_id, created_at
`

type CreateFavoriteRecipeParams struct {
	RecipeID pgtype.UUID `json:"recipeId"`
	UsrID    pgtype.UUID `json:"usrId"`
}

func (q *Queries) CreateFavoriteRecipe(ctx context.Context, arg CreateFavoriteRecipeParams) (Favoring, error) {
	row := q.db.QueryRow(ctx, createFavoriteRecipe, arg.RecipeID, arg.UsrID)
	var i Favoring
	err := row.Scan(
		&i.ID,
		&i.RecipeID,
		&i.UsrID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteFavoriteRecipe = `-- name: DeleteFavoriteRecipe :one
DELETE FROM
    favoring
WHERE
    recipe_id = $1
AND
    usr_id = $2
RETURNING
    id, recipe_id, usr_id, created_at
`

type DeleteFavoriteRecipeParams struct {
	RecipeID pgtype.UUID `json:"recipeId"`
	UsrID    pgtype.UUID `json:"usrId"`
}

func (q *Queries) DeleteFavoriteRecipe(ctx context.Context, arg DeleteFavoriteRecipeParams) (Favoring, error) {
	row := q.db.QueryRow(ctx, deleteFavoriteRecipe, arg.RecipeID, arg.UsrID)
	var i Favoring
	err := row.Scan(
		&i.ID,
		&i.RecipeID,
		&i.UsrID,
		&i.CreatedAt,
	)
	return i, err
}

const existsFavoriteRecipe = `-- name: ExistsFavoriteRecipe :one
SELECT EXISTS (
    SELECT
        1
    FROM
        favoring
    WHERE
        recipe_id = $1
    AND
        usr_id = $2
)
`

type ExistsFavoriteRecipeParams struct {
	RecipeID pgtype.UUID `json:"recipeId"`
	UsrID    pgtype.UUID `json:"usrId"`
}

func (q *Queries) ExistsFavoriteRecipe(ctx context.Context, arg ExistsFavoriteRecipeParams) (bool, error) {
	row := q.db.QueryRow(ctx, existsFavoriteRecipe, arg.RecipeID, arg.UsrID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const listFavoriteRecipe = `-- name: ListFavoriteRecipe :many
SELECT
    id,
    chef_id,
    name,
    servings,
    image_url,
    introduction,
    created_at,
    updated_at,
    num_fav
FROM
    recipe
WHERE
    recipe.access_level = 1
AND
        EXISTS (
            SELECT
                1
            FROM
                favoring
            WHERE
                recipe_id = recipe.id
            AND
                favoring.usr_id = $1
        )
`

type ListFavoriteRecipeRow struct {
	ID           pgtype.UUID        `json:"id"`
	ChefID       pgtype.UUID        `json:"chefId"`
	Name         string             `json:"name"`
	Servings     int32              `json:"servings"`
	ImageUrl     pgtype.Text        `json:"imageUrl"`
	Introduction pgtype.Text        `json:"introduction"`
	CreatedAt    pgtype.Timestamptz `json:"createdAt"`
	UpdatedAt    pgtype.Timestamptz `json:"updatedAt"`
	NumFav       int32              `json:"numFav"`
}

func (q *Queries) ListFavoriteRecipe(ctx context.Context, usrID pgtype.UUID) ([]ListFavoriteRecipeRow, error) {
	rows, err := q.db.Query(ctx, listFavoriteRecipe, usrID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListFavoriteRecipeRow
	for rows.Next() {
		var i ListFavoriteRecipeRow
		if err := rows.Scan(
			&i.ID,
			&i.ChefID,
			&i.Name,
			&i.Servings,
			&i.ImageUrl,
			&i.Introduction,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.NumFav,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
