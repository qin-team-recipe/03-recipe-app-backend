// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: favorite.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createFavoriteRecipe = `-- name: CreateFavoriteRecipe :one
INSERT INTO favoring 
(
    recipe_id,
    usr_id
)
VALUES
(
    $1,
    $2
)
RETURNING 
    id, recipe_id, usr_id, created_at
`

type CreateFavoriteRecipeParams struct {
	RecipeID pgtype.UUID `json:"recipeId"`
	UsrID    pgtype.UUID `json:"usrId"`
}

func (q *Queries) CreateFavoriteRecipe(ctx context.Context, arg CreateFavoriteRecipeParams) (Favoring, error) {
	row := q.db.QueryRow(ctx, createFavoriteRecipe, arg.RecipeID, arg.UsrID)
	var i Favoring
	err := row.Scan(
		&i.ID,
		&i.RecipeID,
		&i.UsrID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteFavoriteRecipe = `-- name: DeleteFavoriteRecipe :one
DELETE FROM
    favoring
WHERE
    recipe_id = $1
AND
    usr_id = $2
RETURNING
    id, recipe_id, usr_id, created_at
`

type DeleteFavoriteRecipeParams struct {
	RecipeID pgtype.UUID `json:"recipeId"`
	UsrID    pgtype.UUID `json:"usrId"`
}

func (q *Queries) DeleteFavoriteRecipe(ctx context.Context, arg DeleteFavoriteRecipeParams) (Favoring, error) {
	row := q.db.QueryRow(ctx, deleteFavoriteRecipe, arg.RecipeID, arg.UsrID)
	var i Favoring
	err := row.Scan(
		&i.ID,
		&i.RecipeID,
		&i.UsrID,
		&i.CreatedAt,
	)
	return i, err
}

const existsFavoriteRecipe = `-- name: ExistsFavoriteRecipe :one
SELECT EXISTS (
    SELECT
        1
    FROM
        favoring
    WHERE
        recipe_id = $1
    AND
        usr_id = $2
)
`

type ExistsFavoriteRecipeParams struct {
	RecipeID pgtype.UUID `json:"recipeId"`
	UsrID    pgtype.UUID `json:"usrId"`
}

func (q *Queries) ExistsFavoriteRecipe(ctx context.Context, arg ExistsFavoriteRecipeParams) (bool, error) {
	row := q.db.QueryRow(ctx, existsFavoriteRecipe, arg.RecipeID, arg.UsrID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}
