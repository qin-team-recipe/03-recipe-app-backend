// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: featured_chef.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const fakeListFeaturedChef = `-- name: FakeListFeaturedChef :many
WITH
RECURSIVE generate_index (ii) AS (
    SELECT 0
    UNION ALL
    SELECT ii + 1
    FROM generate_index
)
SELECT
    nanoid() AS chef_id,
    '' AS name,
    'https://source.unsplash.com/random/300x300?v=1' AS image_url,
    0 AS num_follower,
    0 AS kpi_featured
FROM
    generate_index
LIMIT 10
`

type FakeListFeaturedChefRow struct {
	ChefID      string `json:"chefID"`
	Name        string `json:"name"`
	ImageUrl    string `json:"imageUrl"`
	NumFollower int32  `json:"numFollower"`
	KpiFeatured int32  `json:"kpiFeatured"`
}

func (q *Queries) FakeListFeaturedChef(ctx context.Context) ([]FakeListFeaturedChefRow, error) {
	rows, err := q.db.Query(ctx, fakeListFeaturedChef)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FakeListFeaturedChefRow
	for rows.Next() {
		var i FakeListFeaturedChefRow
		if err := rows.Scan(
			&i.ChefID,
			&i.Name,
			&i.ImageUrl,
			&i.NumFollower,
			&i.KpiFeatured,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listFeaturedChef = `-- name: ListFeaturedChef :many
WITH
history AS (
    SELECT
        SUM(CASE WHEN is_follow THEN 1 ELSE 0 END) - SUM(CASE WHEN is_follow THEN 0 ELSE 1 END) AS kpi_featured,
        chef_id
    FROM
        follow_history
    GROUP BY
        chef_id
)
SELECT
    history.chef_id,
    chef.name,
    chef.image_url,
    (SELECT
         COUNT(1)
     FROM
         following
     WHERE
         following.chef_id = history.chef_id) AS num_follower,
    history.kpi_featured
FROM
    history
INNER JOIN
    chef
ON
    history.chef_id = chef.id
ORDER BY
    kpi_featured DESC
`

type ListFeaturedChefRow struct {
	ChefID      string      `json:"chefID"`
	Name        string      `json:"name"`
	ImageUrl    pgtype.Text `json:"imageUrl"`
	NumFollower int64       `json:"numFollower"`
	KpiFeatured int32       `json:"kpiFeatured"`
}

func (q *Queries) ListFeaturedChef(ctx context.Context) ([]ListFeaturedChefRow, error) {
	rows, err := q.db.Query(ctx, listFeaturedChef)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListFeaturedChefRow
	for rows.Next() {
		var i ListFeaturedChefRow
		if err := rows.Scan(
			&i.ChefID,
			&i.Name,
			&i.ImageUrl,
			&i.NumFollower,
			&i.KpiFeatured,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
