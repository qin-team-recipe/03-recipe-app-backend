// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: fake_chef.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const fakeListFeaturedChef = `-- name: FakeListFeaturedChef :many
WITH
RECURSIVE generate_index (ii) AS (
    SELECT 0
    UNION ALL
    SELECT ii + 1
    FROM generate_index
)
SELECT
    GEN_RANDOM_UUID() AS chef_id,
    '' AS name,
    'https://source.unsplash.com/random/300x300?v=1' AS image_url,
    0 AS num_follower,
    0 AS score
FROM
    generate_index
LIMIT $1
`

type FakeListFeaturedChefRow struct {
	ChefID      pgtype.UUID `json:"chefId"`
	Name        string      `json:"name"`
	ImageUrl    string      `json:"imageUrl"`
	NumFollower int32       `json:"numFollower"`
	Score       int32       `json:"score"`
}

func (q *Queries) FakeListFeaturedChef(ctx context.Context, lim int32) ([]FakeListFeaturedChefRow, error) {
	rows, err := q.db.Query(ctx, fakeListFeaturedChef, lim)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FakeListFeaturedChefRow
	for rows.Next() {
		var i FakeListFeaturedChefRow
		if err := rows.Scan(
			&i.ChefID,
			&i.Name,
			&i.ImageUrl,
			&i.NumFollower,
			&i.Score,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
