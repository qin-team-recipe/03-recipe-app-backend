// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: trend_recipe.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const fakeListTrendRecipe = `-- name: FakeListTrendRecipe :many
WITH
RECURSIVE generate_index (ii) AS (
    SELECT 0
    UNION ALL
    SELECT ii + 1
    FROM generate_index
)
SELECT
    nanoid() AS recipe_id,
    '' AS title,
    '' AS comment,
    'https://source.unsplash.com/random/300x300?v=1' AS image_url,
    0 AS num_fav,
    0 AS score
FROM
    generate_index
LIMIT 10
`

type FakeListTrendRecipeRow struct {
	RecipeID string `json:"recipeID"`
	Title    string `json:"title"`
	Comment  string `json:"comment"`
	ImageUrl string `json:"imageUrl"`
	NumFav   int32  `json:"numFav"`
	Score    int32  `json:"score"`
}

func (q *Queries) FakeListTrendRecipe(ctx context.Context) ([]FakeListTrendRecipeRow, error) {
	rows, err := q.db.Query(ctx, fakeListTrendRecipe)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FakeListTrendRecipeRow
	for rows.Next() {
		var i FakeListTrendRecipeRow
		if err := rows.Scan(
			&i.RecipeID,
			&i.Title,
			&i.Comment,
			&i.ImageUrl,
			&i.NumFav,
			&i.Score,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTrendRecipe = `-- name: ListTrendRecipe :many
WITH
history AS (
SELECT
    SUM(CASE WHEN is_fav THEN 1 ELSE 0 END) - SUM(CASE WHEN is_fav THEN 0 ELSE 1 END) AS score,
    recipe_id
FROM
    fav_history
WHERE
    CURRENT_TIMESTAMP - INTERVAL '3 days' <= created_at
GROUP BY
    recipe_id
)
SELECT
    history.recipe_id,
    recipe.title,
    recipe.comment,
    recipe.image_url,
    (SELECT
         COUNT(1)
     FROM
         favoring
     WHERE
         favoring.recipe_id = history.recipe_id) AS num_fav,
    history.score
FROM
    history
INNER JOIN
    recipe
ON
    history.recipe_id = recipe.id
ORDER BY
    score DESC
`

type ListTrendRecipeRow struct {
	RecipeID string      `json:"recipeID"`
	Title    string      `json:"title"`
	Comment  string      `json:"comment"`
	ImageUrl pgtype.Text `json:"imageUrl"`
	NumFav   int64       `json:"numFav"`
	Score    int32       `json:"score"`
}

func (q *Queries) ListTrendRecipe(ctx context.Context) ([]ListTrendRecipeRow, error) {
	rows, err := q.db.Query(ctx, listTrendRecipe)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListTrendRecipeRow
	for rows.Next() {
		var i ListTrendRecipeRow
		if err := rows.Scan(
			&i.RecipeID,
			&i.Title,
			&i.Comment,
			&i.ImageUrl,
			&i.NumFav,
			&i.Score,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
